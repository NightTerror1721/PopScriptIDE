package kp.le.editor;

import java.awt.GridLayout;
import java.util.List;
import java.util.Objects;
import javax.swing.JPanel;
import kp.le.langfile.LanguageLineType;
import kp.le.langfile.LanguageRepository;
import kp.le.langfile.LanguageRepository.LineReference;

/**
 *
 * @author Marc
 */
public class LineTable extends JPanel
{
    private final LangEditor editor;
    private final LanguageRepository repository;
    private final EntryType type;
    private List<LineEntry> entries;
    
    public LineTable(LangEditor editor, LanguageRepository repository, EntryType type)
    {
        this.editor = Objects.requireNonNull(editor);
        this.repository = Objects.requireNonNull(repository);
        this.type = type;
        
        initComponents();
        init();
    }
    public LineTable(LangEditor editor, LanguageRepository repository)
    {
        this(editor, repository, null);
    }
    
    private void init()
    {
        scroll.getVerticalScrollBar().setUnitIncrement(16);
    }
    
    public final void buildEntries()
    {
        if(entries != null)
        {
            entries.forEach(tableBase::remove);
            entries = null;
        }
        
        List<LineReference> refs;
        if(type == null)
            refs = repository.getAllLinesReferences();
        else
        {
            var indices = LanguageLineType.getTypeIndices(type);
            refs = repository.getLinesReferences(indices);
        }
        
        entries = refs.stream()
                .map(ref -> new LineEntry(editor, ref))
                .sorted((left, right) -> {
                    int cmp = left.getType().compareTo(right.getType());
                    if(cmp != 0)
                        return cmp;
                    
                    return Integer.compare(left.getId(), right.getId());
                }).toList();
        
        entries.forEach(tableBase::add);
        
        tableBase.setLayout(new GridLayout(entries.size(), 1, 0, 2));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        tableBase = new javax.swing.JPanel();

        javax.swing.GroupLayout tableBaseLayout = new javax.swing.GroupLayout(tableBase);
        tableBase.setLayout(tableBaseLayout);
        tableBaseLayout.setHorizontalGroup(
            tableBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );
        tableBaseLayout.setVerticalGroup(
            tableBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        scroll.setViewportView(tableBase);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scroll;
    private javax.swing.JPanel tableBase;
    // End of variables declaration//GEN-END:variables
}
