//////////////////////////////////////////////////////////////////////
// File: langdefs
// Author: Krampus1721
// Type: Include file
//////////////////////////////////////////////////////////////////////


const true  = 1;
const false = 0;

const invalid_id = -1;

macro set(int reference, int value) { reference = value; }

macro add(int a, int b) { yield a + b; }
macro sub(int a, int b) { yield a - b; }
macro mul(int a, int b) { yield a * b; }
macro div(int a, int b) { yield a / b; }

macro increment(int reference) { yield ++reference; }
macro decrement(int reference) { yield --reference; }

macro equals(int left, int right) { yield left == right; }
macro not_equals(int left, int right) { yield left != right; }
macro greater_than(int left, int right) { yield left > right; }
macro less_than(int left, int right) { yield left < right; }
macro greater_or_equal_than(int left, int right) { yield left >= right; }
macro less_or_equal_than(int left, int right) { yield left <= right; }

macro and(int left, int right) { yield left && right; }
macro or(int left, int right) { yield left || right; }
macro not(int value) { yield !value; }

macro max(int a, int b)
{
	if(a > b)
		yield a;
	else yield b;
}

macro min(int a, int b)
{
	if(a < b)
		yield a;
	else yield b;
}

macro clamp(int value, int minValue, int maxValue)
{
	yield min(maxValue, max(minValue, value));
}


/* Function utils */

macro d100() { yield RANDOM_100; }
macro Random100() { yield RANDOM_100; }

macro IsInitialTurn() { yield GAME_TURN == 0; }
macro IsTurn(int turn) { yield GAME_TURN == turn; }
macro IsAtLeastTurn(int turn) { yield GAME_TURN >= turn; }

macro SetUserInputsEnabled(int enabled)
{
	if(enabled)
		EnableUserInputs();
	else
		DisableUserInputs();
}

macro SetSingleMarkerEntry(
	int entry_id,
	int marker,
	int num_braves,
	int num_warriors,
	int num_firewarriors,
	int num_preachers)
{
	SetMarkerEntry(entry_id, marker, -1, num_braves, num_warriors, num_firewarriors, num_preachers);
}

macro DefaultManaCounts()
{
	every(256, 133)
	{
		if(MY_NUM_PEOPLE < 80)
		{
			SetBucketUsage(on);
			SetBucketCountForSpell(BLAST, 		8);
			SetBucketCountForSpell(CONVERT, 		8);
			SetBucketCountForSpell(INSECT_PLAGUE, 	32);
			SetBucketCountForSpell(INVISIBILITY, 	40);
			SetBucketCountForSpell(SHIELD, 		48);
			SetBucketCountForSpell(LAND_BRIDGE, 	66);
			SetBucketCountForSpell(LIGHTNING_BOLT, 	64);
			SetBucketCountForSpell(HYPNOTISM, 		70);
			SetBucketCountForSpell(WHIRLWIND, 		72);
			SetBucketCountForSpell(FLATTEN, 		80);
			SetBucketCountForSpell(EARTHQUAKE, 	100);
			SetBucketCountForSpell(EROSION, 		140);
			SetBucketCountForSpell(FIRESTORM, 		168);
			SetBucketCountForSpell(ANGEL_OF_DEAD, 	320);
			SetBucketCountForSpell(VOLCANO, 		640);
		}
		else
		{
			SetBucketUsage(on);
			SetBucketCountForSpell(BLAST, 		4);
			SetBucketCountForSpell(CONVERT, 		4);
			SetBucketCountForSpell(INSECT_PLAGUE, 	16);
			SetBucketCountForSpell(INVISIBILITY, 	20);
			SetBucketCountForSpell(SHIELD, 		24);
			SetBucketCountForSpell(LAND_BRIDGE, 	33);
			SetBucketCountForSpell(LIGHTNING_BOLT, 	32);
			SetBucketCountForSpell(HYPNOTISM, 		35);
			SetBucketCountForSpell(WHIRLWIND, 		36);
			SetBucketCountForSpell(FLATTEN, 		40);
			SetBucketCountForSpell(EARTHQUAKE, 	50);
			SetBucketCountForSpell(EROSION, 		70);
			SetBucketCountForSpell(FIRESTORM, 		84);
			SetBucketCountForSpell(ANGEL_OF_DEAD, 	180);
			SetBucketCountForSpell(VOLCANO, 		320);
		}
	}
}

