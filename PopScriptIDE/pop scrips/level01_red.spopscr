import "stdlib";

init
{
	/* Initial State elements */
	AutoMessages(on);
	ExtraWoodCollection(off);
	FlybyAllowInterrupt(off);
	GiveUpAndSulk(off);
	SetAutoBuild(off);
	SetAutoHouse(on);
	SetBucketUsage(on);
	SetReincarnation(on);
	AutoAttack(off);
	BringNewPeopleBack(off);
	BuildVehicle(off);
	ConstructBuilding(off);
	DefendBase(on);
	Defend(on);
	FetchFarVehicle(off);
	FetchLostVehicle(off);
	FetchLostPeople(off);
	FetchWood(on);
	FirewarriorDefend(off);
	HouseAPerson(on);
	PopulateDrumTower(on);
	Preach(off);
	SendGhosts(off);
	EnableShamanGetWilds(off);
	TrainPeople(off);
	TurnPush(off);

	/* Attack properties */
	Self.attr.attack_percentage 			= 0;		/* [0, 255] */
	Self.attr.max_attacks				= 999;	/* [0, 999] */
	Self.attr.away_shaman				= false;	/* [false, true] */
	Self.attr.away_brave				= 100;	/* [0, 100] */
	Self.attr.away_warrior				= 0;		/* [0, 100] */
	Self.attr.away_firewarrior			= 0;		/* [0, 100] */
	Self.attr.away_religious				= 0;		/* [0, 100] */
	Self.attr.away_spy					= 0;		/* [0, 100] */
	Self.attr.max_spy_attacks			= 0;		/* [0, 999] */
	Self.attr.people_per_boat			= 0;		/* [0, 999] */
	Self.attr.people_per_balloon			= 0;		/* [0, 999] */

	/* Buildings properties */
	Self.attr.house_percentage			= 0;		/* [0, 100] */
	Self.attr.expansion					= 20;	/* [0, 255] */
	Self.attr.max_buildings_on_go			= 3;		/* [0, 999] */
	Self.attr.max_train_at_once			= 5;		/* [0, 999] */
	Self.attr.pref_warrior_trains			= false;	/* [false, true] */
	Self.attr.pref_firewarrior_trains		= false;	/* [false, true] */
	Self.attr.pref_religious_trains		= false;	/* [false, true] */
	Self.attr.pref_spy_trains			= false;	/* [false, true] */
	Self.attr.pref_boat_huts				= false;	/* [false, true] */
	Self.attr.pref_balloon_huts			= false;	/* [false, true] */

	/* People types properties */
	Self.attr.pref_warrior_people			= 0;		/* [0, 255] */
	Self.attr.pref_firewarrior_people		= 0;		/* [0, 255] */
	Self.attr.pref_religious_people		= 0;		/* [0, 255] */
	Self.attr.pref_spy_people			= 0;		/* [0, 255] */
	Self.attr.pref_boat_drivers			= 0;		/* [0, 255] */
	Self.attr.pref_balloon_drivers		= 0;		/* [0, 255] */

	/* Defense properties */
	SetDefenseRadius(7);						/* [0, 15] */
	Self.attr.defense_rad_incr			= 3;		/* [0, 15] */
	Self.attr.max_defensive_actions		= 5;		/* [0, 999] */
	Self.attr.use_preacher_for_defence		= false;	/* [false, true] */

	/* Miscelaneous properties */
	Self.attr.base_under_attack_retreat	= false;	/* [false, true] */
	Self.attr.count_preach_damage			= true;	/* [false, true] */
	Self.attr.dont_auto_train_preachers	= false;	/* [false, true] */
	Self.attr.dont_delete_useless_boat_house= false;	/* [false, true] */
	Self.attr.dont_group_at_dt			= false;	/* [false, true] */
	Self.attr.dont_use_boats				= false;	/* [false, true] */
	Self.attr.empty_at_waypoint			= false;	/* [false, true] */
	Self.attr.enemy_spy_max_stand			= 255;	/* [128, 999] */
	Self.attr.fight_stop_distance			= 0;		/* 0 or 24 or 26 */
	Self.attr.group_option				= 0;		/* 0 or 2  or 2  */
	Self.attr.random_build_side			= false;	/* [false, true] */
	Self.attr.shaman_blast				= 128;	/* [0, 128] */
	Self.attr.retreat_value				= 50;	/* [0, 255] */
	Self.attr.spy_check_frequency			= 0;		/* [0, 255] */
	Self.attr.spy_discover_chance			= 30;	/* [0, 255] */

	/* Main Drum Tower */
	DelayMainDrumTower();
	SetDrumTowerPos(42, 18);

	/* Initial Spells */

	/* Initial marker entries */
	SetMarkerEntry(0, 0, 1, 4, 0, 0, 0);
	SetSingleMarkerEntry(1, 2, 4, 0, 0, 0);

	/* Initial vars */
	global int attack_var = 0;
	global int surrender = false;
	global int tuto = 0;

	/* Initial commands */
	SetAttackVariable(attack_var);
	DisableUserInputs();
	SpellDefence(32, 34, on);
}

main
{
	DefaultManaCounts();

	every(32)
	{
		global init int init_patrols = false;
		if(!init_patrols)
		{
			init_patrols = true;
			MarkerEntries(0, 1, -1, -1);
			BuildDrumTower(40, 18);
		}

		global int surrender;
		if(!surrender && Self.people.brave <= 6 &&
				Self.buildings.large_hut == 0 && Self.buildings.medium_hut == 0 && Self.buildings.small_hut == 0)
		{
			surrender = true;
			GiveUpAndSulk(on);
		}
	}

	every(128)
	{
		global init int att_mode = 0;
		global init int attack = 0;
		
		if(att_mode == 0)
		{
			if(Blue.people.brave >= 16)
			{
				att_mode = 1;
				GiveOneShot(Spell.land_bridge, Red.id);
				AutoAttack(on);
				Self.attr.away_shaman = true;
				Attack(Blue.id, 6, ATTACK_BUILDING, Building.no_specific, 999,
						Spell.land_bridge, Spell.no_specific, Spell.no_specific, ATTACK_NORMAL, false, 5, 6, -1);
				Self.attr.away_shaman = false;
			}
		}
		else
		{
			attack += 1;
			if(att_mode == 1)
			{
				global int surrender;
				if(attack >= 18 && Self.people.brave > 11 && !surrender)
				{
					att_mode = 2;
					attack = 0;
					Attack(Blue.id, 8, ATTACK_BUILDING, Building.no_specific, 999,
							Spell.no_specific, Spell.no_specific, Spell.no_specific, ATTACK_NORMAL, false, 5, -1, -1);
				}
			}
			else if(att_mode == 2)
			{
				global int surrender;
				if(attack >= 22 && Self.people.brave > 15 && !surrender)
				{
					att_mode = 1;
					attack = 0;
					Attack(Blue.id, 10, ATTACK_BUILDING, Building.no_specific, 999,
							Spell.no_specific, Spell.no_specific, Spell.no_specific, ATTACK_NORMAL, false, 5, -1, -1);
				}
			}
		}
	}

	every(32)
	{
		global int tuto = 0;
		if(tuto == 0)
		{
			if(GetHeadTriggerCount(6, 242) == 0)
			{
				tuto = 1;
				CreateMsgInformationZoom(79, 64, 208, 1000);
			}
		}
		else if(tuto == 1)
		{
			if(GetHeadTriggerCount(64, 204) == 0)
			{
				tuto = 2;
				CreateMsgInformationZoom(80, 26, 230, 1500);
			}
		}
		else if(tuto == 2)
		{
			if(GetHeadTriggerCount(24, 230) == 0)
			{
				tuto = 3;
				CreateMsgInformation(81);
			}
		}
		else if(tuto == 3)
		{
			if(GetHeightAtPos(7) <= 1000)
			{
				tuto = 4;
				CreateMsgInformationZoom(82, 54, 254, 1750);
			}
		}
	}

	every(128)
	{
		global int tuto = 0;
		if(tuto == 4)
		{
			tuto = 5;
		}
		else if(tuto == 5)
		{
			tuto = 6;
			CreateMsgInformation(83);
		}
	}

	every(8)
	{
		if(IsAtLeastTurn(70))
		{
			global init int flyby = true;
			if(flyby)
			{
				flyby = false;

				CreateMsgNarrative(78);
				SetMsgAutoOpenDlg();
				SetMsgDeleteOnOk();

				EnableUserInputs();

				Flyby.new();
				
				Flyby.event.pos(6, 242, 4, 50);
				Flyby.event.pos(64, 204, 75, 80);
				Flyby.event.pos(44, 20, 175, 80);
				Flyby.event.pos(2, 222, 275, 80);

				Flyby.event.angle(200, 4, 50);
				Flyby.event.angle(850, 75, 70);
				Flyby.event.angle(1600, 175, 70);
				Flyby.event.angle(250, 280, 70);

				Flyby.end_target(2, 222, 250, 0);
				Flyby.start();
			}
		}
	}
}



















