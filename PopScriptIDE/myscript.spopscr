namespace utils
{
	internal game_turn = GAME_TURN;
}

namespace self
{
	const id = 0;
	action zoom = ZoomTo;
	
	namespace builds
	{
		macro GetBuildCount() { yield 10; }
	}
}

action zoom_test = self.zoom;

macro default_zoom(int angle) {
	ZoomTo(0, 128, angle);
}

const int INITIAL_TURN = 0;
macro IsInitialTurn() { yield GAME_TURN == INITIAL_TURN; }

macro max(int a, int b)
{
	yield a > b ? a : b;
}

macro min(int a, int b)
{
	yield a < b ? a : b;
}

macro clamp(int value, int minValue, int maxValue)
{
	yield max(minValue, min(maxValue, value));
}

macro IsTurn(int turn)
{
	yield GAME_TURN == turn;
}

main
{
	self.zoom(10, 18, 1250);
	
	if(utils.game_turn == 0)
	{
		
	}
	else
	{
		every(128, 10)
		{
			if(IsInitialTurn())
			{
				var x = 10;
				var y = 50;
				if(IsTurn(clamp(x, 5, y)))
				{
					x = 65;
				}
			}
		}
	}
}
